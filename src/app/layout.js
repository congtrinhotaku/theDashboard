import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};


// Header Component
function Header({ onMenuToggle, unreadNotifications = 3 }) {
  const [showNotifications, setShowNotifications] = useState(false);
  const [showProfile, setShowProfile] = useState(false);

  const notifications = [
    { id: 1, title: 'New Alert', message: '5 employees have upcoming anniversaries', time: '5m ago', unread: true },
    { id: 2, title: 'Report Ready', message: 'Monthly payroll report is ready', time: '1h ago', unread: true },
    { id: 3, title: 'System Update', message: 'Dashboard updated successfully', time: '2h ago', unread: false }
  ];

  return (
    <header className="bg-white border-b border-gray-200 sticky top-0 z-50 shadow-sm">
      <div className="px-4 lg:px-6 py-4">
        <div className="flex items-center justify-between">
          {/* Left Section */}
          <div className="flex items-center space-x-4">
            <button 
              onClick={onMenuToggle}
              className="lg:hidden p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition"
            >
              <Menu className="w-6 h-6" />
            </button>
            
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-indigo-600 rounded-lg flex items-center justify-center">
                <BarChart3 className="w-6 h-6 text-white" />
              </div>
              <div className="hidden sm:block">
                <h1 className="text-xl font-bold text-gray-900">ACME Dashboard</h1>
                <p className="text-xs text-gray-600">Executive Management Portal</p>
              </div>
            </div>
          </div>

          {/* Search Bar - Hidden on mobile */}
          <div className="hidden md:flex flex-1 max-w-md mx-8">
            <div className="relative w-full">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
              <input
                type="text"
                placeholder="Search employees, departments..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none transition"
              />
            </div>
          </div>
          
          {/* Right Section */}
          <div className="flex items-center space-x-2 lg:space-x-4">
            {/* Notifications */}
            <div className="relative">
              <button 
                onClick={() => setShowNotifications(!showNotifications)}
                className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition"
              >
                <Bell className="w-5 h-5" />
                {unreadNotifications > 0 && (
                  <span className="absolute top-1 right-1 w-5 h-5 bg-red-500 rounded-full text-white text-xs flex items-center justify-center font-medium">
                    {unreadNotifications}
                  </span>
                )}
              </button>

              {/* Notifications Dropdown */}
              {showNotifications && (
                <div className="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden">
                  <div className="p-4 border-b border-gray-200 flex items-center justify-between">
                    <h3 className="font-semibold text-gray-900">Notifications</h3>
                    <button className="text-sm text-indigo-600 hover:text-indigo-700">Mark all read</button>
                  </div>
                  <div className="max-h-96 overflow-y-auto">
                    {notifications.map(notif => (
                      <div key={notif.id} className={`p-4 border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${notif.unread ? 'bg-blue-50' : ''}`}>
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <p className="text-sm font-medium text-gray-900">{notif.title}</p>
                            <p className="text-sm text-gray-600 mt-1">{notif.message}</p>
                            <p className="text-xs text-gray-500 mt-2">{notif.time}</p>
                          </div>
                          {notif.unread && <div className="w-2 h-2 bg-blue-600 rounded-full ml-2"></div>}
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className="p-3 bg-gray-50 text-center">
                    <button className="text-sm text-indigo-600 hover:text-indigo-700 font-medium">View all notifications</button>
                  </div>
                </div>
              )}
            </div>

            {/* Settings */}
            <button className="hidden sm:block p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition">
              <Settings className="w-5 h-5" />
            </button>

            {/* Profile */}
            <div className="relative">
              <button 
                onClick={() => setShowProfile(!showProfile)}
                className="flex items-center space-x-2 lg:space-x-3 pl-2 lg:pl-4 border-l border-gray-200 hover:bg-gray-50 rounded-lg transition p-2"
              >
                <div className="w-8 h-8 bg-indigo-600 rounded-full flex items-center justify-center">
                  <span className="text-white text-sm font-semibold">CA</span>
                </div>
                <div className="hidden lg:block text-left">
                  <p className="text-sm font-medium text-gray-900">CEO Admin</p>
                  <p className="text-xs text-gray-600">Executive</p>
                </div>
              </button>

              {/* Profile Dropdown */}
              {showProfile && (
                <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden">
                  <div className="p-4 border-b border-gray-200">
                    <p className="font-semibold text-gray-900">CEO Admin</p>
                    <p className="text-sm text-gray-600">admin@acme.com</p>
                  </div>
                  <div className="py-2">
                    <button className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                      <UserCheck className="w-4 h-4 mr-3" />
                      Profile Settings
                    </button>
                    <button className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                      <Shield className="w-4 h-4 mr-3" />
                      Privacy & Security
                    </button>
                    <button className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                      <HelpCircle className="w-4 h-4 mr-3" />
                      Help & Support
                    </button>
                  </div>
                  <div className="border-t border-gray-200 py-2">
                    <button className="w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-red-50 flex items-center">
                      <LogOut className="w-4 h-4 mr-3" />
                      Sign Out
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}

// Sidebar Component
function Sidebar({ isOpen, onClose }) {
  const [activeItem, setActiveItem] = useState('dashboard');

  const menuItems = [
    { id: 'dashboard', icon: Home, label: 'Dashboard', badge: null },
    { id: 'employees', icon: Users, label: 'Employees', badge: '342' },
    { id: 'payroll', icon: DollarSign, label: 'Payroll', badge: null },
    { id: 'benefits', icon: Gift, label: 'Benefits', badge: null },
    { id: 'vacation', icon: Calendar, label: 'Vacation Days', badge: '12' },
    { id: 'alerts', icon: Bell, label: 'Alerts & Events', badge: '4' },
    { id: 'reports', icon: FileText, label: 'Reports', badge: null },
    { id: 'analytics', icon: PieChart, label: 'Analytics', badge: null },
    { id: 'timesheets', icon: Clock, label: 'Timesheets', badge: null }
  ];

  const quickLinks = [
    { id: 'anniversaries', label: 'Hiring Anniversaries' },
    { id: 'birthdays', label: 'Birthdays This Month' },
    { id: 'new-hires', label: 'New Hires' },
    { id: 'departures', label: 'Departures' }
  ];

  return (
    <>
      {/* Mobile Overlay */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={onClose}
        ></div>
      )}

      {/* Sidebar */}
      <aside className={`
        fixed lg:static inset-y-0 left-0 z-50
        w-64 bg-white border-r border-gray-200
        transform transition-transform duration-300 ease-in-out
        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        flex flex-col
      `}>
        {/* Mobile Close Button */}
        <div className="lg:hidden flex items-center justify-between p-4 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-900">Menu</h2>
          <button 
            onClick={onClose}
            className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto p-4 space-y-1">
          <div className="mb-6">
            <h3 className="px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
              Main Menu
            </h3>
            {menuItems.map(item => (
              <button
                key={item.id}
                onClick={() => setActiveItem(item.id)}
                className={`
                  w-full flex items-center justify-between px-3 py-2 rounded-lg
                  transition-colors duration-150
                  ${activeItem === item.id 
                    ? 'bg-indigo-50 text-indigo-700' 
                    : 'text-gray-700 hover:bg-gray-100'
                  }
                `}
              >
                <div className="flex items-center space-x-3">
                  <item.icon className="w-5 h-5" />
                  <span className="text-sm font-medium">{item.label}</span>
                </div>
                {item.badge && (
                  <span className={`
                    px-2 py-0.5 text-xs font-medium rounded-full
                    ${activeItem === item.id 
                      ? 'bg-indigo-200 text-indigo-800' 
                      : 'bg-gray-200 text-gray-700'
                    }
                  `}>
                    {item.badge}
                  </span>
                )}
              </button>
            ))}
          </div>

          {/* Quick Links */}
          <div className="pt-4 border-t border-gray-200">
            <h3 className="px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
              Quick Links
            </h3>
            {quickLinks.map(link => (
              <button
                key={link.id}
                className="w-full flex items-center justify-between px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <span>{link.label}</span>
                <ChevronRight className="w-4 h-4 text-gray-400" />
              </button>
            ))}
          </div>
        </nav>

        {/* Sidebar Footer */}
        <div className="p-4 border-t border-gray-200 bg-gray-50">
          <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-3">
            <div className="flex items-start space-x-2">
              <AlertCircle className="w-5 h-5 text-indigo-600 flex-shrink-0 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-indigo-900">Need Help?</p>
                <p className="text-xs text-indigo-700 mt-1">Contact IT Support for assistance</p>
                <button className="text-xs text-indigo-600 font-medium mt-2 hover:text-indigo-700">
                  Get Support →
                </button>
              </div>
            </div>
          </div>
        </div>
      </aside>
    </>
  );
}

// Footer Component
function Footer() {
  const currentYear = new Date().getFullYear();

  return (
    <footer className="bg-white border-t border-gray-200 mt-auto">
      <div className="px-6 py-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-6">
          {/* Company Info */}
          <div className="col-span-1 md:col-span-2">
            <div className="flex items-center space-x-2 mb-4">
              <div className="w-8 h-8 bg-indigo-600 rounded-lg flex items-center justify-center">
                <BarChart3 className="w-5 h-5 text-white" />
              </div>
              <span className="font-bold text-gray-900">ACME Corporation</span>
            </div>
            <p className="text-sm text-gray-600 mb-3">
              Integrated HR & Payroll Dashboard for Executive Management. 
              Making informed decisions with real-time employee and payroll insights.
            </p>
            <div className="flex space-x-4">
              <span className="text-xs text-gray-500">Version 2.1.0</span>
              <span className="text-xs text-gray-500">•</span>
              <span className="text-xs text-gray-500">Last Updated: Oct 2024</span>
            </div>
          </div>

          {/* Quick Links */}
          <div>
            <h3 className="text-sm font-semibold text-gray-900 mb-3">Resources</h3>
            <ul className="space-y-2">
              <li>
                <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">Documentation</a>
              </li>
              <li>
                <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">API Reference</a>
              </li>
              <li>
                <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">User Guide</a>
              </li>
              <li>
                <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">Release Notes</a>
              </li>
            </ul>
          </div>

          {/* Support */}
          <div>
            <h3 className="text-sm font-semibold text-gray-900 mb-3">Support</h3>
            <ul className="space-y-2">
              <li>
                <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">Help Center</a>
              </li>
              <li>
                <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">Contact IT</a>
              </li>
              <li>
                <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">Report Issue</a>
              </li>
              <li>
                <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">System Status</a>
              </li>
            </ul>
          </div>
        </div>

        {/* Bottom Bar */}
        <div className="pt-6 border-t border-gray-200">
          <div className="flex flex-col md:flex-row justify-between items-center space-y-3 md:space-y-0">
            <p className="text-sm text-gray-600">
              © {currentYear} ACME Corporation. All rights reserved.
            </p>
            <div className="flex items-center space-x-6">
              <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">Privacy Policy</a>
              <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">Terms of Service</a>
              <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">Security</a>
              <a href="#" className="text-sm text-gray-600 hover:text-indigo-600 transition">Accessibility</a>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
